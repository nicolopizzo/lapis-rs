Nat: Type.

zero: Nat.

def S: Nat -> Nat.

def plus: Nat -> Nat -> Nat.
[ n: Nat ] plus zero n --> n
[ m: Nat, n: Nat] plus (S m) n --> S (plus m n).

(; def K : Nat -> Nat := x => (S (S zero)). ;)
(; def K2 := x : Nat => S ( S zero ). ;)
