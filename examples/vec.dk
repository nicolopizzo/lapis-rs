A: Type.
Vector: nat.Nat -> Type.
nil: Vector nat.zero.
cons: n:nat.Nat -> A -> Vector n -> Vector (nat.S n).

def append: n: nat.Nat -> Vector n -> m: nat.Nat -> Vector m -> Vector (nat.plus n m).
[ m: nat.Nat , v: Vector m ] append nat.zero nil m v --> v
[ n: nat.Nat,
v1: Vector n,
m: nat.Nat,
e: A,
v2: Vector m ] append (nat.S n) (cons n e v1) m v2 --> cons (nat.plus n m) e (append n v1 m v2).
